

Hystrix:
Once the specified number of requests (threshold volume) are sent within the specified time (rolling stats time window) and
 if the specified percentage of requests end up as errors (error percentage), the hystrix opens the circuit. 
 Once the circuit is open, no more requests will be sent to the infytel-friend-family service.
 After a specified time interval ( sleep window ), hystrix will again close the circuit and pass one request.
 If that request fails, then again circuit is automatically closed for the specified time again. This repeats in a cycle.
 
 
 
 Hystrix can be configured using @HystrixProperty annotation and using some of the properties like:

execution.isolation.thread.timeoutInMilliseconds - Time in milliseconds at which point the command will timeout and halt the execution.
circuitBreaker.sleepWindowInMilliseconds- The time in milliseconds after  HystrixCircuitBreaker trips open that it should wait before trying requests again.
circuitBreaker.errorThresholdPercentage- Error percentage threshold (as the whole number such as 50) at which point the circuit breaker will trip open and reject requests.

<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix</artifactId>
			<version>1.4.7.RELEASE</version>
		</dependency>
		
@EnableCircuitBreaker

@HystrixCommand(fallbackMethod = "", ignoreExceptions= TypeMismatchException.class, etc..)

hystrix.command.default.circuitbreaker.requestvolumeThreshold= 4
hystrix.command.default.circuitbreaker.errorThresholdPercentage =50
hystrix.command.default.circuitbreaker.sleepWindowInMilliSeconds =60000
hystrix.command.default.metrics.rollingstats.timeInMilliSecons =10000


Asynchronus Communication - Steps
=======================================

Create the below method in the hystrix service class:

public Future<PlanDTO> getSpecificPlans(int planId) {
		return new AsyncResult<PlanDTO>() {
			@Override
			public PlanDTO invoke() {
				return template.getForObject("http://PLANMS"+"/plans/"+planId, PlanDTO.class);
			}
		};
		
	}
The method returns a Future. The Future is a datatype which indicates that the result will be available in the future. 

To return a future value, the method returns an AsyncResult. AsyncResult is an abstract class. Hence we are returning an anonymous implementation of it while overriding its invoke method. The invoke method does the actual code execution.

In the CustomerController, we process the result of the Future as:

Future<PlanDTO> planDTOFuture=hystService.getSpecificPlans(custDTO.getCurrentPlan().getPlanId());
custDTO.setCurrentPlan(planDTOFuture.get());
The same is done for FriendFamilyMS invocation as well.

==========================================================================
