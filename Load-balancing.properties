In Spring cloud load balance can be done by 2 ways
1) one is using ribbon client- software load balancer not hardware load balancer
2) Spring cloud load balancer  - check the implementation code for future.



Ribbon steps:

1) add the dependency in the pom file
      <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-ribbon -->
      <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-ribbon</artifactId>
          <version>1.4.7.RELEASE</version>
      </dependency>
 
 2) create Load balance RestTemplate
 
    @LoadBalanced @Bean
    public RestTemplate restTemplate(){    
    return new RestTemplate();
    }
  
  3) create ribbon client 
    
    @RibbonClient(name="memberClient")
    
  4) replace http://localhost:port/  with http://memberClient
  
  5) add below properties to application.properties
    
    memberClient.ribbon.eureka.enabled =false
    memberClient.ribbon.listOfServers = http://localhost:port1/, http://localhost:port2
    
    
    by following the above steps we can achieve load balance using Ribbon client.
 
========================================================================================================================

SPRING CLOUD LOAD BALANCER IMPLEMENTATION
-------------------------------------------------


How to use Spring Cloud Load Balancer:

Add the dependency in the pom.xml file of CustomerMS.

<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-loadbalancer</artifactId>
</dependency>

 

Add the configuration class for providing the load balanced RestTemplate object.

@Configuration
public class CustomerConfig {
	@Bean @LoadBalanced
	RestTemplate restTemplate() {
		return new RestTemplate();
	}
}

Add the annotation in the CustomerController.class. MyloadBalancer client helps to get the load-balanced URL with the help of LoadBalancerConfig.class.

@LoadBalancerClient(name="MyloadBalancer", configuration=LoadBalancerConfig.class)
Add the LoadBalancerConfig class as shown below. This class helps to load balance the requests among the two instances of FriendFamily microservice running at the ports 8300 and 9300 in the localhost. Here, statically we are providing the details of the microservices instances.

@Component
public class LoadBalancerConfig {
	@Bean
	  @Primary
	  ServiceInstanceListSupplier serviceInstanceListSupplier() {
	    return new DemoServiceInstanceListSuppler("FriendFamilyMS");
	  }
	}
	class DemoServiceInstanceListSuppler implements ServiceInstanceListSupplier {
	  private final String serviceId;
	  DemoServiceInstanceListSuppler(String serviceId) {
		  System.out.println("inside constructor");
		    this.serviceId = serviceId;
		  }
	@Override
	public Flux<List<ServiceInstance>> get() {
		// TODO Auto-generated method stub
		  System.out.println("inside list generation");
		
		return Flux.just(Arrays
		        .asList(new DefaultServiceInstance(serviceId + "1", serviceId, "localhost", 8300, false),
		                new DefaultServiceInstance(serviceId + "2", serviceId, "localhost", 9300, false)));
		  }
		
	@Override
	public String getServiceId() {
		// TODO Auto-generated method stub
		return serviceId;
	}
}

In the CustomerController, modify the code snippet which invokes the FriendFamily microservice accordingly.

@RequestMapping(value = "/customers/{phoneNo}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public CustomerDTO getCustomerProfile(@PathVariable Long phoneNo) {
		
		logger.info("Profile request for customer {}", phoneNo);
		
		CustomerDTO custDTO=custService.getCustomerProfile(phoneNo);
		PlanDTO planDTO=new RestTemplate().getForObject(planUri+custDTO.getCurrentPlan().getPlanId(), PlanDTO.class);
		custDTO.setCurrentPlan(planDTO);
		
		@SuppressWarnings("unchecked")
		List<Long> friends=template.getForObject("http://MyloadBalancer/customers/"+phoneNo+"/friends", List.class);
		custDTO.setFriendAndFamily(friends);
		return custDTO;
	}






